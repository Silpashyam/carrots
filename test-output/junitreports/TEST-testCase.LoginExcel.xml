<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite skipped="4" hostname="DESKTOP-PTK84VK" name="testCase.LoginExcel" tests="5" failures="0" timestamp="2021-06-13T14:05:30 IST" time="0.777" errors="1">
  <testcase name="beforeTest" time="0.777" classname="testCase.LoginExcel">
    <error type="org.apache.poi.openxml4j.exceptions.ODFNotOfficeXmlFileException" message="The supplied data appears to be in ODF (Open Document) Format. Formats like these (eg ODS, ODP) are not supported, try Apache ODFToolkit">
      <![CDATA[org.apache.poi.openxml4j.exceptions.ODFNotOfficeXmlFileException: The supplied data appears to be in ODF (Open Document) Format. Formats like these (eg ODS, ODP) are not supported, try Apache ODFToolkit
at org.apache.poi.openxml4j.opc.ZipPackage.getPartsImpl(ZipPackage.java:265)
at org.apache.poi.openxml4j.opc.OPCPackage.getParts(OPCPackage.java:742)
at org.apache.poi.openxml4j.opc.OPCPackage.open(OPCPackage.java:315)
at org.apache.poi.ooxml.util.PackageHelper.open(PackageHelper.java:47)
at org.apache.poi.xssf.usermodel.XSSFWorkbook.<init>(XSSFWorkbook.java:299)
at utilities.ExcelHelper.readExcelFun(ExcelHelper.java:29)
at testCase.LoginExcel.beforeTest(LoginExcel.java:42)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:63)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:348)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:302)
at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:176)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:122)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </error>
  </testcase> <!-- beforeTest -->
  <system-out/>
  <testcase name="invalidUsernameValidPassword" time="0.000" classname="testCase.LoginExcel">
    <skipped/>
  </testcase> <!-- invalidUsernameValidPassword -->
  <system-out/>
  <testcase name="validUsernameInvalidPassword" time="0.000" classname="testCase.LoginExcel">
    <skipped/>
  </testcase> <!-- validUsernameInvalidPassword -->
  <system-out/>
  <testcase name="invalidUsernameInvalidPassword" time="0.000" classname="testCase.LoginExcel">
    <skipped/>
  </testcase> <!-- invalidUsernameInvalidPassword -->
  <system-out/>
  <testcase name="validUsernameValidPassword" time="0.000" classname="testCase.LoginExcel">
    <skipped/>
  </testcase> <!-- validUsernameValidPassword -->
  <system-out/>
</testsuite> <!-- testCase.LoginExcel -->
